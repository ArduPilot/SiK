print('''/* generated by tools/gen_si446x_api.py */

static uint8_t
exchange_byte(uint8_t in) __reentrant 
{
	SPIF1 = 0;
	SPI1DAT = in;
	while (!SPIF1);
	return SPI1DAT;
}

static uint16_t
exchange_word(uint16_t in) __reentrant 
{
	uint16_t out;
	out = exchange_byte(in>>8);
	out = out<<8 | exchange_byte(in & 0xff);
	return out;
}

static uint32_t
exchange_3bytes(uint32_t in) __reentrant 
{
	uint32_t out;
	out = exchange_byte((in>>16) & 0xff);
	out = out<<16 | exchange_word(in&0xffff);
	return out;
}

static uint32_t
exchange_dword(uint32_t in) __reentrant
{
	uint32_t out;
	out = exchange_word(in>>16);
	out = out<<16 | exchange_word(in&0xffff);
	return out;
}

static void
reply_open() __reentrant
{
	while (1) {
		NSS1 = 0;
		exchange_byte(0x44);
		if (exchange_byte(0) == 0xff)
			break;
		NSS1 = 1;
	}
}

static void
reply_close() __reentrant
{
	NSS1 = 1;
}

static void
wait_for_cts() __reentrant
{
	reply_open();
	reply_close();
}

static void
read_rx_fifo(register uint8_t len, __xdata uint8_t * data) __reentrant
{
	NSS1 = 0;
	exchange_byte(0x77);
	while (len--) {
		SPIF1 = 0;
		SPI1DAT = 0;
		while (!SPIF1);
		*data++ = SPI1DAT;
	}
	NSS1 = 1;
}

static void
write_tx_fifo(register uint8_t len, __xdata uint8_t * __pdata data)
{
	NSS1 = 0;
	exchange_byte(0x66);
	while (len--) {
		SPIF1 = 0;
		SPI1DAT = *data++;
		while (!SPIF1);
	}
	NSS1 = 1;
}
''')

cmd_list_text = '''
power_up;0x02;b boot_opts, b xtal_opts, d xo_freq;;
nop;0x00;;;
part_info;0x01;;b chiprev, w part, b pbuild, w id, b customer, b romid;
func_info;0x10;;b revext, b revbranch, b revint, w patch, b func;
gpio_pin_cfg;0x13;b gpio0, b gpio1, b gpio2, b gpio3, b nirq, b sdo, b gen_config;b gpio0, b gpio1, b gpio2, b gpio3, b nirq, b sdo, b gen_config;
fifo_info;0x15;b fifo;b rx_fifo_count, b rx_fifo_space;
get_int_status;0x20;b ph_clr_pend, b modem_clr_pend, b chip_clr_pend;b int_pend, b int_status, b ph_pend, b ph_status, b modem_pend, b modem_status, b chip_pend, b chip_status;
get_int_status_clear_all;0x20;;;
req_device_state;0x33;;b curr_state, b curr_channel;
change_state;0x34;b next_state;;
__do_not_use_frr_decl;0x50;;b frr_a,b frr_b, b frr_c, b frr_d;
ir_cal_commands;0x17;b search_step_size, b search_rssi_avg, b rx_chain_set1, b rx_chain_set2;;
ircal_manual;0x1a;b amp, b ph;b ircal_amp_reply, b ircal_ph_reply;
start_tx;0x31;b channel, b condition, w tx_len, b tx_delay, b num_repeat;;
tx_hop;0x37;b inte, d3 frac, w vco_cnt, w pll_settle_time;;
packet_info;0x16;b field_no, w len, w len_diff;w length;
get_modem_status;0x22;b modem_clr_pend;b modem_pend, b modem_status, b curr_rssi, b latch_rssi, b ant1_rssi, b ant2_rssi, w afc_freq_offset;
start_rx;0x32;b channel, b condition, w rx_len, b next_state1, b next_state2, b next_state3;;
rx_hop;0x36;b inte, d3 frac,w vco_cnt;;
get_property1;0x12;b group, bf 1, b start_prop;b data;
set_property1;0x11;b group, bf 1, b start_prop, b data;;
set_property2;0x11;b group, bf 2, b start_prop, b data1, b data2;;
set_property3;0x11;b group, bf 3, b start_prop, b data1, b data2, b data3;;
set_property4;0x11;b group, bf 4, b start_prop, b data1, b data2, b data3, b data4;;
set_property5;0x11;b group, bf 5, b start_prop, b data1, b data2, b data3, b data4, b data5;;
set_property6;0x11;b group, bf 6, b start_prop, b data1, b data2, b data3, b data4, b data5, b data6;;
get_adc_reading;0x14;b adc_en, b adc_cfg;w gpio_adc, w battery_adc, w temp_adc;
get_ph_status;0x21;b ph_clr_pend;b ph_pend, b ph_status;
'''

def parse_arglist(s):
	h = s.strip().split(',')
	if h == ['']:
		return []
	return [tuple(a.strip().split(' ')) for a in h]

cmds = [
	(name, int(no, 0), parse_arglist(args), parse_arglist(rets))
	for name, no, args, rets, _ in
	[l.strip().split(';') for l in cmd_list_text.strip().split('\n')]
]

typemap = { 'b': 'uint8_t', 'w': 'uint16_t', 'd3': 'uint32_t', 'd': 'uint32_t' }
def format_arg(arg):
	argtype, argname = arg
	return typemap[argtype] + " " + argname

recvmap = { 'b': 'exchange_byte(0)', 'w': 'exchange_word(0)',
			'd3': 'exchange_3bytes(0)', 'd': 'exchange_dword(0)' }
for name, no, args, rets in cmds:
	if len(rets) == 0:
		continue
	print("#define %s_reply(" % name, end="")
	print(*[name for typ, name in rets], sep=", ", end="")
	print(") { \\")
	print("\treply_open(); \\")
	for typ, name in rets:
		print("\t%s = %s; \\" % (name, recvmap[typ]))
	print("\treply_close(); \\")
	print("}")
	print("")

transmitmap = { 'b': 'exchange_byte', 'w': 'exchange_word',
				'd3': 'exchange_3bytes', 'd': 'exchange_dword',
				'bf': 'exchange_byte', 'wf': 'exchange_word',
				'd3f': 'exchange_3bytes', 'df': 'exchange_dword' }
for name, no, args, rets in cmds:
	print("#define cmd_%s(" % name, end="")
	print(*[name for typ, name in args if not typ.endswith('f')],
		  sep=", ", end="")
	print(") { \\")
	print("\tNSS1 = 0; \\")
	print("\texchange_byte(0x%x); \\" % no)
	if len(args):
		print(*[
			"\t%s(%s); \\" % (transmitmap[typ], name)
			for typ, name in args
		], sep="\n")
	print("\tNSS1 = 1; \\")
	print("}\n")

print ('''

#define frr_a_read(frr_a) \\
{ \\
	NSS1 = 0; \\
	exchange_byte(0x50); \\
	frr_a = exchange_byte(0x0); \\
	NSS1 = 1; \\
}

#define frr_bc_read(frr_b, frr_c) \\
{ \\
	NSS1 = 0; \\
	exchange_byte(0x51); \\
	frr_b = exchange_byte(0x0); \\
	frr_c = exchange_byte(0x0); \\
	NSS1 = 1; \\
}

#define frr_d_read(frr_d) \\
{ \\
	NSS1 = 0; \\
	exchange_byte(0x57); \\
	frr_d = exchange_byte(0x0); \\
	NSS1 = 1; \\
}

''')
