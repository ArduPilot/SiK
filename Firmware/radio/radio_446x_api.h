/* generated by tools/gen_si446x_api.py */

static uint8_t
exchange_byte(uint8_t in) __reentrant 
{
	SPIF1 = 0;
	SPI1DAT = in;
	while (!SPIF1);
	return SPI1DAT;
}

static uint16_t
exchange_word(uint16_t in) __reentrant 
{
	uint16_t out;
	out = exchange_byte(in>>8);
	out = out<<8 | exchange_byte(in & 0xff);
	return out;
}

static uint32_t
exchange_3bytes(uint32_t in) __reentrant 
{
	uint32_t out;
	out = exchange_byte((in>>16) & 0xff);
	out = out<<16 | exchange_word(in&0xffff);
	return out;
}

static uint32_t
exchange_dword(uint32_t in) __reentrant
{
	uint32_t out;
	out = exchange_word(in>>16);
	out = out<<16 | exchange_word(in&0xffff);
	return out;
}

static void
reply_open() __reentrant
{
	while (1) {
		NSS1 = 0;
		exchange_byte(0x44);
		if (exchange_byte(0) == 0xff)
			break;
		NSS1 = 1;
	}
}

static void
reply_close() __reentrant
{
	NSS1 = 1;
}

static void
wait_for_cts() __reentrant
{
	reply_open();
	reply_close();
}

static void
read_rx_fifo(register uint8_t len, __xdata uint8_t * data) __reentrant
{
	NSS1 = 0;
	exchange_byte(0x77);
	while (len--) {
		SPIF1 = 0;
		SPI1DAT = 0;
		while (!SPIF1);
		*data++ = SPI1DAT;
	}
	NSS1 = 1;
}

static void
write_tx_fifo(register uint8_t len, __xdata uint8_t * __pdata data)
{
	NSS1 = 0;
	exchange_byte(0x66);
	while (len--) {
		SPIF1 = 0;
		SPI1DAT = *data++;
		while (!SPIF1);
	}
	NSS1 = 1;
}

#define part_info_reply(chiprev, part, pbuild, id, customer, romid) { \
	reply_open(); \
	chiprev = exchange_byte(0); \
	part = exchange_word(0); \
	pbuild = exchange_byte(0); \
	id = exchange_word(0); \
	customer = exchange_byte(0); \
	romid = exchange_byte(0); \
	reply_close(); \
}

#define func_info_reply(revext, revbranch, revint, patch, func) { \
	reply_open(); \
	revext = exchange_byte(0); \
	revbranch = exchange_byte(0); \
	revint = exchange_byte(0); \
	patch = exchange_word(0); \
	func = exchange_byte(0); \
	reply_close(); \
}

#define gpio_pin_cfg_reply(gpio0, gpio1, gpio2, gpio3, nirq, sdo, gen_config) { \
	reply_open(); \
	gpio0 = exchange_byte(0); \
	gpio1 = exchange_byte(0); \
	gpio2 = exchange_byte(0); \
	gpio3 = exchange_byte(0); \
	nirq = exchange_byte(0); \
	sdo = exchange_byte(0); \
	gen_config = exchange_byte(0); \
	reply_close(); \
}

#define fifo_info_reply(rx_fifo_count, rx_fifo_space) { \
	reply_open(); \
	rx_fifo_count = exchange_byte(0); \
	rx_fifo_space = exchange_byte(0); \
	reply_close(); \
}

#define get_int_status_reply(int_pend, int_status, ph_pend, ph_status, modem_pend, modem_status, chip_pend, chip_status) { \
	reply_open(); \
	int_pend = exchange_byte(0); \
	int_status = exchange_byte(0); \
	ph_pend = exchange_byte(0); \
	ph_status = exchange_byte(0); \
	modem_pend = exchange_byte(0); \
	modem_status = exchange_byte(0); \
	chip_pend = exchange_byte(0); \
	chip_status = exchange_byte(0); \
	reply_close(); \
}

#define req_device_state_reply(curr_state, curr_channel) { \
	reply_open(); \
	curr_state = exchange_byte(0); \
	curr_channel = exchange_byte(0); \
	reply_close(); \
}

#define __do_not_use_frr_decl_reply(frr_a, frr_b, frr_c, frr_d) { \
	reply_open(); \
	frr_a = exchange_byte(0); \
	frr_b = exchange_byte(0); \
	frr_c = exchange_byte(0); \
	frr_d = exchange_byte(0); \
	reply_close(); \
}

#define ircal_manual_reply(ircal_amp_reply, ircal_ph_reply) { \
	reply_open(); \
	ircal_amp_reply = exchange_byte(0); \
	ircal_ph_reply = exchange_byte(0); \
	reply_close(); \
}

#define packet_info_reply(length) { \
	reply_open(); \
	length = exchange_word(0); \
	reply_close(); \
}

#define get_modem_status_reply(modem_pend, modem_status, curr_rssi, latch_rssi, ant1_rssi, ant2_rssi, afc_freq_offset) { \
	reply_open(); \
	modem_pend = exchange_byte(0); \
	modem_status = exchange_byte(0); \
	curr_rssi = exchange_byte(0); \
	latch_rssi = exchange_byte(0); \
	ant1_rssi = exchange_byte(0); \
	ant2_rssi = exchange_byte(0); \
	afc_freq_offset = exchange_word(0); \
	reply_close(); \
}

#define get_property1_reply(data) { \
	reply_open(); \
	data = exchange_byte(0); \
	reply_close(); \
}

#define get_adc_reading_reply(gpio_adc, battery_adc, temp_adc) { \
	reply_open(); \
	gpio_adc = exchange_word(0); \
	battery_adc = exchange_word(0); \
	temp_adc = exchange_word(0); \
	reply_close(); \
}

#define get_ph_status_reply(ph_pend, ph_status) { \
	reply_open(); \
	ph_pend = exchange_byte(0); \
	ph_status = exchange_byte(0); \
	reply_close(); \
}

#define cmd_power_up(boot_opts, xtal_opts, xo_freq) { \
	NSS1 = 0; \
	exchange_byte(0x2); \
	exchange_byte(boot_opts); \
	exchange_byte(xtal_opts); \
	exchange_dword(xo_freq); \
	NSS1 = 1; \
}

#define cmd_nop() { \
	NSS1 = 0; \
	exchange_byte(0x0); \
	NSS1 = 1; \
}

#define cmd_part_info() { \
	NSS1 = 0; \
	exchange_byte(0x1); \
	NSS1 = 1; \
}

#define cmd_func_info() { \
	NSS1 = 0; \
	exchange_byte(0x10); \
	NSS1 = 1; \
}

#define cmd_gpio_pin_cfg(gpio0, gpio1, gpio2, gpio3, nirq, sdo, gen_config) { \
	NSS1 = 0; \
	exchange_byte(0x13); \
	exchange_byte(gpio0); \
	exchange_byte(gpio1); \
	exchange_byte(gpio2); \
	exchange_byte(gpio3); \
	exchange_byte(nirq); \
	exchange_byte(sdo); \
	exchange_byte(gen_config); \
	NSS1 = 1; \
}

#define cmd_fifo_info(fifo) { \
	NSS1 = 0; \
	exchange_byte(0x15); \
	exchange_byte(fifo); \
	NSS1 = 1; \
}

#define cmd_get_int_status(ph_clr_pend, modem_clr_pend, chip_clr_pend) { \
	NSS1 = 0; \
	exchange_byte(0x20); \
	exchange_byte(ph_clr_pend); \
	exchange_byte(modem_clr_pend); \
	exchange_byte(chip_clr_pend); \
	NSS1 = 1; \
}

#define cmd_get_int_status_clear_all() { \
	NSS1 = 0; \
	exchange_byte(0x20); \
	NSS1 = 1; \
}

#define cmd_req_device_state() { \
	NSS1 = 0; \
	exchange_byte(0x33); \
	NSS1 = 1; \
}

#define cmd_change_state(next_state) { \
	NSS1 = 0; \
	exchange_byte(0x34); \
	exchange_byte(next_state); \
	NSS1 = 1; \
}

#define cmd___do_not_use_frr_decl() { \
	NSS1 = 0; \
	exchange_byte(0x50); \
	NSS1 = 1; \
}

#define cmd_ir_cal_commands(search_step_size, search_rssi_avg, rx_chain_set1, rx_chain_set2) { \
	NSS1 = 0; \
	exchange_byte(0x17); \
	exchange_byte(search_step_size); \
	exchange_byte(search_rssi_avg); \
	exchange_byte(rx_chain_set1); \
	exchange_byte(rx_chain_set2); \
	NSS1 = 1; \
}

#define cmd_ircal_manual(amp, ph) { \
	NSS1 = 0; \
	exchange_byte(0x1a); \
	exchange_byte(amp); \
	exchange_byte(ph); \
	NSS1 = 1; \
}

#define cmd_start_tx(channel, condition, tx_len, tx_delay, num_repeat) { \
	NSS1 = 0; \
	exchange_byte(0x31); \
	exchange_byte(channel); \
	exchange_byte(condition); \
	exchange_word(tx_len); \
	exchange_byte(tx_delay); \
	exchange_byte(num_repeat); \
	NSS1 = 1; \
}

#define cmd_tx_hop(inte, frac, vco_cnt, pll_settle_time) { \
	NSS1 = 0; \
	exchange_byte(0x37); \
	exchange_byte(inte); \
	exchange_3bytes(frac); \
	exchange_word(vco_cnt); \
	exchange_word(pll_settle_time); \
	NSS1 = 1; \
}

#define cmd_packet_info(field_no, len, len_diff) { \
	NSS1 = 0; \
	exchange_byte(0x16); \
	exchange_byte(field_no); \
	exchange_word(len); \
	exchange_word(len_diff); \
	NSS1 = 1; \
}

#define cmd_get_modem_status(modem_clr_pend) { \
	NSS1 = 0; \
	exchange_byte(0x22); \
	exchange_byte(modem_clr_pend); \
	NSS1 = 1; \
}

#define cmd_start_rx(channel, condition, rx_len, next_state1, next_state2, next_state3) { \
	NSS1 = 0; \
	exchange_byte(0x32); \
	exchange_byte(channel); \
	exchange_byte(condition); \
	exchange_word(rx_len); \
	exchange_byte(next_state1); \
	exchange_byte(next_state2); \
	exchange_byte(next_state3); \
	NSS1 = 1; \
}

#define cmd_rx_hop(inte, frac, vco_cnt) { \
	NSS1 = 0; \
	exchange_byte(0x36); \
	exchange_byte(inte); \
	exchange_3bytes(frac); \
	exchange_word(vco_cnt); \
	NSS1 = 1; \
}

#define cmd_get_property1(group, start_prop) { \
	NSS1 = 0; \
	exchange_byte(0x12); \
	exchange_byte(group); \
	exchange_byte(1); \
	exchange_byte(start_prop); \
	NSS1 = 1; \
}

#define cmd_set_property1(group, start_prop, data) { \
	NSS1 = 0; \
	exchange_byte(0x11); \
	exchange_byte(group); \
	exchange_byte(1); \
	exchange_byte(start_prop); \
	exchange_byte(data); \
	NSS1 = 1; \
}

#define cmd_set_property2(group, start_prop, data1, data2) { \
	NSS1 = 0; \
	exchange_byte(0x11); \
	exchange_byte(group); \
	exchange_byte(2); \
	exchange_byte(start_prop); \
	exchange_byte(data1); \
	exchange_byte(data2); \
	NSS1 = 1; \
}

#define cmd_set_property3(group, start_prop, data1, data2, data3) { \
	NSS1 = 0; \
	exchange_byte(0x11); \
	exchange_byte(group); \
	exchange_byte(3); \
	exchange_byte(start_prop); \
	exchange_byte(data1); \
	exchange_byte(data2); \
	exchange_byte(data3); \
	NSS1 = 1; \
}

#define cmd_set_property4(group, start_prop, data1, data2, data3, data4) { \
	NSS1 = 0; \
	exchange_byte(0x11); \
	exchange_byte(group); \
	exchange_byte(4); \
	exchange_byte(start_prop); \
	exchange_byte(data1); \
	exchange_byte(data2); \
	exchange_byte(data3); \
	exchange_byte(data4); \
	NSS1 = 1; \
}

#define cmd_set_property5(group, start_prop, data1, data2, data3, data4, data5) { \
	NSS1 = 0; \
	exchange_byte(0x11); \
	exchange_byte(group); \
	exchange_byte(5); \
	exchange_byte(start_prop); \
	exchange_byte(data1); \
	exchange_byte(data2); \
	exchange_byte(data3); \
	exchange_byte(data4); \
	exchange_byte(data5); \
	NSS1 = 1; \
}

#define cmd_set_property6(group, start_prop, data1, data2, data3, data4, data5, data6) { \
	NSS1 = 0; \
	exchange_byte(0x11); \
	exchange_byte(group); \
	exchange_byte(6); \
	exchange_byte(start_prop); \
	exchange_byte(data1); \
	exchange_byte(data2); \
	exchange_byte(data3); \
	exchange_byte(data4); \
	exchange_byte(data5); \
	exchange_byte(data6); \
	NSS1 = 1; \
}

#define cmd_get_adc_reading(adc_en, adc_cfg) { \
	NSS1 = 0; \
	exchange_byte(0x14); \
	exchange_byte(adc_en); \
	exchange_byte(adc_cfg); \
	NSS1 = 1; \
}

#define cmd_get_ph_status(ph_clr_pend) { \
	NSS1 = 0; \
	exchange_byte(0x21); \
	exchange_byte(ph_clr_pend); \
	NSS1 = 1; \
}



#define frr_a_read(frr_a) \
{ \
	NSS1 = 0; \
	exchange_byte(0x50); \
	frr_a = exchange_byte(0x0); \
	NSS1 = 1; \
}

#define frr_bc_read(frr_b, frr_c) \
{ \
	NSS1 = 0; \
	exchange_byte(0x51); \
	frr_b = exchange_byte(0x0); \
	frr_c = exchange_byte(0x0); \
	NSS1 = 1; \
}

#define frr_d_read(frr_d) \
{ \
	NSS1 = 0; \
	exchange_byte(0x57); \
	frr_d = exchange_byte(0x0); \
	NSS1 = 1; \
}


