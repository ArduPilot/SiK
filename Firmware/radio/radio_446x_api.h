/* generated by tools/gen_si446x_api.py */

static uint8_t
exchange_byte(uint8_t in) __reentrant 
{
	SPIF1 = 0;
	SPI1DAT = in;
	while (!SPIF1);
	return SPI1DAT;
}

static uint16_t
exchange_word(uint16_t in) __reentrant 
{
	uint16_t out;
	out = exchange_byte(in>>8);
	out = out<<8 | exchange_byte(in & 0xff);
	return out;
}

static uint32_t
exchange_3bytes(uint32_t in) __reentrant 
{
	uint32_t out;
	out = exchange_byte((in>>16) & 0xff);
	out = out<<16 | exchange_word(in&0xffff);
	return out;
}

static uint32_t
exchange_dword(uint32_t in) __reentrant
{
	uint32_t out;
	out = exchange_word(in>>16);
	out = out<<16 | exchange_word(in&0xffff);
	return out;
}

static void
reply_open() __reentrant
{
	while (1) {
		NSS1 = 0;
		exchange_byte(0x44);
		if (exchange_byte(0) == 0xff)
			break;
		NSS1 = 1;
	}
}

static void
reply_close() __reentrant
{
	NSS1 = 1;
}

static void
wait_for_cts() __reentrant
{
	reply_open();
	reply_close();
}

static void
read_rx_fifo(register uint8_t len, __xdata uint8_t * data) __reentrant
{
	NSS1 = 0;
	exchange_byte(0x77);
	while (len--) {
		SPIF1 = 0;
		SPI1DAT = 0;
		while (!SPIF1);
		*data++ = SPI1DAT;
	}
	NSS1 = 1;
}

static void
write_tx_fifo(register uint8_t len, __xdata uint8_t * __pdata data)
{
	NSS1 = 0;
	exchange_byte(0x66);
	while (len--) {
		SPIF1 = 0;
		SPI1DAT = *data++;
		while (!SPIF1);
	}
	NSS1 = 1;
}

static union {
	uint8_t data;
	uint8_t revext;
	uint8_t ircal_amp_reply;
	uint8_t int_pend;
	uint8_t frr_a;
	uint8_t rx_fifo_count;
	uint8_t modem_pend;
	uint16_t gpio_adc;
	uint8_t ph_pend;
	uint8_t curr_state;
	uint8_t chiprev;
	uint8_t gpio0;
	uint16_t length;
} ret0;
static union {
	uint8_t ph_status;
	uint8_t rx_fifo_space;
	uint16_t part;
	uint8_t gpio1;
	uint8_t revbranch;
	uint8_t curr_channel;
	uint8_t ircal_ph_reply;
	uint16_t battery_adc;
	uint8_t modem_status;
	uint8_t int_status;
	uint8_t frr_b;
} ret1;
static union {
	uint8_t curr_rssi;
	uint8_t revint;
	uint8_t ph_pend;
	uint16_t temp_adc;
	uint8_t frr_c;
	uint8_t pbuild;
	uint8_t gpio2;
} ret2;
static union {
	uint16_t id;
	uint8_t ph_status;
	uint8_t gpio3;
	uint8_t frr_d;
	uint16_t patch;
	uint8_t latch_rssi;
} ret3;
static union {
	uint8_t func;
	uint8_t nirq;
	uint8_t modem_pend;
	uint8_t ant1_rssi;
	uint8_t customer;
} ret4;
static union {
	uint8_t sdo;
	uint8_t ant2_rssi;
	uint8_t romid;
	uint8_t modem_status;
} ret5;
static union {
	uint8_t chip_pend;
	uint16_t afc_freq_offset;
	uint8_t gen_config;
} ret6;
static union {
	uint8_t chip_status;
} ret7;

static void
part_info_reply() __reentrant
{
  reply_open();
  ret0.chiprev = exchange_byte(0);
  ret1.part = exchange_word(0);
  ret2.pbuild = exchange_byte(0);
  ret3.id = exchange_word(0);
  ret4.customer = exchange_byte(0);
  ret5.romid = exchange_byte(0);
  reply_close();
}

static void
func_info_reply() __reentrant
{
  reply_open();
  ret0.revext = exchange_byte(0);
  ret1.revbranch = exchange_byte(0);
  ret2.revint = exchange_byte(0);
  ret3.patch = exchange_word(0);
  ret4.func = exchange_byte(0);
  reply_close();
}

static void
gpio_pin_cfg_reply() __reentrant
{
  reply_open();
  ret0.gpio0 = exchange_byte(0);
  ret1.gpio1 = exchange_byte(0);
  ret2.gpio2 = exchange_byte(0);
  ret3.gpio3 = exchange_byte(0);
  ret4.nirq = exchange_byte(0);
  ret5.sdo = exchange_byte(0);
  ret6.gen_config = exchange_byte(0);
  reply_close();
}

static void
fifo_info_reply() __reentrant
{
  reply_open();
  ret0.rx_fifo_count = exchange_byte(0);
  ret1.rx_fifo_space = exchange_byte(0);
  reply_close();
}

static void
get_int_status_reply() __reentrant
{
  reply_open();
  ret0.int_pend = exchange_byte(0);
  ret1.int_status = exchange_byte(0);
  ret2.ph_pend = exchange_byte(0);
  ret3.ph_status = exchange_byte(0);
  ret4.modem_pend = exchange_byte(0);
  ret5.modem_status = exchange_byte(0);
  ret6.chip_pend = exchange_byte(0);
  ret7.chip_status = exchange_byte(0);
  reply_close();
}

static void
req_device_state_reply() __reentrant
{
  reply_open();
  ret0.curr_state = exchange_byte(0);
  ret1.curr_channel = exchange_byte(0);
  reply_close();
}

static void
__do_not_use_frr_decl_reply() __reentrant
{
  reply_open();
  ret0.frr_a = exchange_byte(0);
  ret1.frr_b = exchange_byte(0);
  ret2.frr_c = exchange_byte(0);
  ret3.frr_d = exchange_byte(0);
  reply_close();
}

static void
ircal_manual_reply() __reentrant
{
  reply_open();
  ret0.ircal_amp_reply = exchange_byte(0);
  ret1.ircal_ph_reply = exchange_byte(0);
  reply_close();
}

static void
packet_info_reply() __reentrant
{
  reply_open();
  ret0.length = exchange_word(0);
  reply_close();
}

static void
get_modem_status_reply() __reentrant
{
  reply_open();
  ret0.modem_pend = exchange_byte(0);
  ret1.modem_status = exchange_byte(0);
  ret2.curr_rssi = exchange_byte(0);
  ret3.latch_rssi = exchange_byte(0);
  ret4.ant1_rssi = exchange_byte(0);
  ret5.ant2_rssi = exchange_byte(0);
  ret6.afc_freq_offset = exchange_word(0);
  reply_close();
}

static void
get_property1_reply() __reentrant
{
  reply_open();
  ret0.data = exchange_byte(0);
  reply_close();
}

static void
get_adc_reading_reply() __reentrant
{
  reply_open();
  ret0.gpio_adc = exchange_word(0);
  ret1.battery_adc = exchange_word(0);
  ret2.temp_adc = exchange_word(0);
  reply_close();
}

static void
get_ph_status_reply() __reentrant
{
  reply_open();
  ret0.ph_pend = exchange_byte(0);
  ret1.ph_status = exchange_byte(0);
  reply_close();
}

#define cmd_power_up(boot_opts, xtal_opts, xo_freq) { \
	NSS1 = 0; \
	exchange_byte(0x2); \
	exchange_byte(boot_opts); \
	exchange_byte(xtal_opts); \
	exchange_dword(xo_freq); \
	NSS1 = 1; \
}

#define cmd_nop() { \
	NSS1 = 0; \
	exchange_byte(0x0); \
	NSS1 = 1; \
}

#define cmd_part_info() { \
	NSS1 = 0; \
	exchange_byte(0x1); \
	NSS1 = 1; \
}

#define cmd_func_info() { \
	NSS1 = 0; \
	exchange_byte(0x10); \
	NSS1 = 1; \
}

#define cmd_gpio_pin_cfg(gpio0, gpio1, gpio2, gpio3, nirq, sdo, gen_config) { \
	NSS1 = 0; \
	exchange_byte(0x13); \
	exchange_byte(gpio0); \
	exchange_byte(gpio1); \
	exchange_byte(gpio2); \
	exchange_byte(gpio3); \
	exchange_byte(nirq); \
	exchange_byte(sdo); \
	exchange_byte(gen_config); \
	NSS1 = 1; \
}

#define cmd_fifo_info(fifo) { \
	NSS1 = 0; \
	exchange_byte(0x15); \
	exchange_byte(fifo); \
	NSS1 = 1; \
}

#define cmd_get_int_status(ph_clr_pend, modem_clr_pend, chip_clr_pend) { \
	NSS1 = 0; \
	exchange_byte(0x20); \
	exchange_byte(ph_clr_pend); \
	exchange_byte(modem_clr_pend); \
	exchange_byte(chip_clr_pend); \
	NSS1 = 1; \
}

#define cmd_get_int_status_clear_all() { \
	NSS1 = 0; \
	exchange_byte(0x20); \
	NSS1 = 1; \
}

#define cmd_req_device_state() { \
	NSS1 = 0; \
	exchange_byte(0x33); \
	NSS1 = 1; \
}

#define cmd_change_state(next_state) { \
	NSS1 = 0; \
	exchange_byte(0x34); \
	exchange_byte(next_state); \
	NSS1 = 1; \
}

#define cmd___do_not_use_frr_decl() { \
	NSS1 = 0; \
	exchange_byte(0x50); \
	NSS1 = 1; \
}

#define cmd_ir_cal_commands(search_step_size, search_rssi_avg, rx_chain_set1, rx_chain_set2) { \
	NSS1 = 0; \
	exchange_byte(0x17); \
	exchange_byte(search_step_size); \
	exchange_byte(search_rssi_avg); \
	exchange_byte(rx_chain_set1); \
	exchange_byte(rx_chain_set2); \
	NSS1 = 1; \
}

#define cmd_ircal_manual(amp, ph) { \
	NSS1 = 0; \
	exchange_byte(0x1a); \
	exchange_byte(amp); \
	exchange_byte(ph); \
	NSS1 = 1; \
}

#define cmd_start_tx(channel, condition, tx_len, tx_delay, num_repeat) { \
	NSS1 = 0; \
	exchange_byte(0x31); \
	exchange_byte(channel); \
	exchange_byte(condition); \
	exchange_word(tx_len); \
	exchange_byte(tx_delay); \
	exchange_byte(num_repeat); \
	NSS1 = 1; \
}

#define cmd_tx_hop(inte, frac, vco_cnt, pll_settle_time) { \
	NSS1 = 0; \
	exchange_byte(0x37); \
	exchange_byte(inte); \
	exchange_3bytes(frac); \
	exchange_word(vco_cnt); \
	exchange_word(pll_settle_time); \
	NSS1 = 1; \
}

#define cmd_packet_info(field_no, len, len_diff) { \
	NSS1 = 0; \
	exchange_byte(0x16); \
	exchange_byte(field_no); \
	exchange_word(len); \
	exchange_word(len_diff); \
	NSS1 = 1; \
}

#define cmd_get_modem_status(modem_clr_pend) { \
	NSS1 = 0; \
	exchange_byte(0x22); \
	exchange_byte(modem_clr_pend); \
	NSS1 = 1; \
}

#define cmd_start_rx(channel, condition, rx_len, next_state1, next_state2, next_state3) { \
	NSS1 = 0; \
	exchange_byte(0x32); \
	exchange_byte(channel); \
	exchange_byte(condition); \
	exchange_word(rx_len); \
	exchange_byte(next_state1); \
	exchange_byte(next_state2); \
	exchange_byte(next_state3); \
	NSS1 = 1; \
}

#define cmd_rx_hop(inte, frac, vco_cnt, pll_settle_time) { \
	NSS1 = 0; \
	exchange_byte(0x36); \
	exchange_byte(inte); \
	exchange_3bytes(frac); \
	exchange_word(vco_cnt); \
	exchange_word(pll_settle_time); \
	NSS1 = 1; \
}

#define cmd_get_property1(group, start_prop) { \
	NSS1 = 0; \
	exchange_byte(0x12); \
	exchange_byte(group); \
	exchange_byte(1); \
	exchange_byte(start_prop); \
	NSS1 = 1; \
}

#define cmd_set_property1(group, start_prop, data) { \
	NSS1 = 0; \
	exchange_byte(0x11); \
	exchange_byte(group); \
	exchange_byte(1); \
	exchange_byte(start_prop); \
	exchange_byte(data); \
	NSS1 = 1; \
}

#define cmd_set_property2(group, start_prop, data1, data2) { \
	NSS1 = 0; \
	exchange_byte(0x11); \
	exchange_byte(group); \
	exchange_byte(2); \
	exchange_byte(start_prop); \
	exchange_byte(data1); \
	exchange_byte(data2); \
	NSS1 = 1; \
}

#define cmd_set_property3(group, start_prop, data1, data2, data3) { \
	NSS1 = 0; \
	exchange_byte(0x11); \
	exchange_byte(group); \
	exchange_byte(3); \
	exchange_byte(start_prop); \
	exchange_byte(data1); \
	exchange_byte(data2); \
	exchange_byte(data3); \
	NSS1 = 1; \
}

#define cmd_set_property4(group, start_prop, data1, data2, data3, data4) { \
	NSS1 = 0; \
	exchange_byte(0x11); \
	exchange_byte(group); \
	exchange_byte(4); \
	exchange_byte(start_prop); \
	exchange_byte(data1); \
	exchange_byte(data2); \
	exchange_byte(data3); \
	exchange_byte(data4); \
	NSS1 = 1; \
}

#define cmd_set_property5(group, start_prop, data1, data2, data3, data4, data5) { \
	NSS1 = 0; \
	exchange_byte(0x11); \
	exchange_byte(group); \
	exchange_byte(5); \
	exchange_byte(start_prop); \
	exchange_byte(data1); \
	exchange_byte(data2); \
	exchange_byte(data3); \
	exchange_byte(data4); \
	exchange_byte(data5); \
	NSS1 = 1; \
}

#define cmd_set_property6(group, start_prop, data1, data2, data3, data4, data5, data6) { \
	NSS1 = 0; \
	exchange_byte(0x11); \
	exchange_byte(group); \
	exchange_byte(6); \
	exchange_byte(start_prop); \
	exchange_byte(data1); \
	exchange_byte(data2); \
	exchange_byte(data3); \
	exchange_byte(data4); \
	exchange_byte(data5); \
	exchange_byte(data6); \
	NSS1 = 1; \
}

#define cmd_get_adc_reading(adc_en, adc_cfg) { \
	NSS1 = 0; \
	exchange_byte(0x14); \
	exchange_byte(adc_en); \
	exchange_byte(adc_cfg); \
	NSS1 = 1; \
}

#define cmd_get_ph_status(ph_clr_pend) { \
	NSS1 = 0; \
	exchange_byte(0x21); \
	exchange_byte(ph_clr_pend); \
	NSS1 = 1; \
}



static void
frr_abc_read()
{
	NSS1 = 0;
	exchange_byte(0x50);
	ret0.frr_a = exchange_byte(0x0);
	ret1.frr_b = exchange_byte(0x0);
	ret2.frr_c = exchange_byte(0x0);
	NSS1 = 1;
}

static void
frr_d_read()
{
	NSS1 = 0;
	exchange_byte(0x57);
	ret3.frr_d = exchange_byte(0x0);
	NSS1 = 1;
}


